<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd">
    
    <flow name="get:/user/accounts:api-config">
        <flow-ref name="validateToken" doc:name="validateToken -&gt; var user"/>

        <set-variable variableName="registeredBanksAccountsInfo" value="#[[]]" doc:name="Initialize registeredBanksAccountsInfo variable"/>
        <enricher source="#[dw('payload')]" target="#[flowVars.anypointBankAccountsInfo]" doc:name="var anypointBankAccountsInfo">
            <flow-ref name="getAnypointBankAccountsInfo" doc:name="getAnypointBankAccountsInfo"/>
        </enricher>
        <foreach collection="#[(${registered.banks}).keySet()]" counterVariableName="bankCounter" doc:name="For Each Bank">
            <enricher source="#[dw('(flowVars.registeredBanksAccountsInfo + payload) when payload != null otherwise flowVars.registeredBanksAccountsInfo')]" target="#[flowVars.registeredBanksAccountsInfo]" doc:name="Add to registeredBanksAccountsInfo variable">
                <flow-ref name="getRegisteredBanksAccountsInfo" doc:name="getRegisteredBanksAccountsInfo"/>
            </enricher>

        </foreach>
        <dw:transform-message doc:name="Prepare response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	anypointBank: flowVars.anypointBankAccountsInfo,
	registeredBanks: flowVars.registeredBanksAccountsInfo
}]]></dw:set-payload>
        </dw:transform-message>


        <logger message="#[message.inboundProperties.'http.host' + message.inboundProperties.'http.request.uri'] has finished processing." level="INFO" doc:name="Log success"/>
    </flow>
    <sub-flow name="getAnypointBankAccountsInfo">
        <enricher source="#[dw('payload')]" target="#[flowVars.info]" doc:name="var info">
            <http:request config-ref="HTTP_Bank_Accounts_Process_API_Request_Configuration" path="/accounts/aggregate" method="GET" doc:name="Get accounts info">
                <http:request-builder>
                    <http:query-param paramName="ssn" value="#[flowVars.user.ssn]"/>

                </http:request-builder>
            </http:request>
        </enricher>
        <enricher source="#[dw('payload')]" target="#[flowVars.transactions]" doc:name="var transactions">
            <http:request config-ref="HTTP_Bank_Accounts_Process_API_Request_Configuration" path="/transactions/aggregate" method="GET" doc:name="Get accounts transactions">
                <http:request-builder>
                    <http:query-param paramName="ssn" value="#[flowVars.user.ssn]"/>

                </http:request-builder>
            </http:request>
        </enricher>
        <dw:transform-message doc:name="Build account info">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
using (
	checkingAccInfo = flowVars.info filter ($.type == "checking"),
	savingsAccInfo = flowVars.info filter ($.type == "savings")
){
	bankName: p('anypoint.bank.name'),
	bankId: p('anypoint.bank.id'),
	
	(checking: 
		using (
			transactions = ((flowVars.transactions filter ($.account_id == checkingAccInfo[0].id)) orderBy $.details.completed)[-1..0]
		){
		accountId           : checkingAccInfo[0].id,
		amount              : checkingAccInfo[0].balance.amount,
		currency            : checkingAccInfo[0].balance.currency,
		lastTransactionDate : transactions[0].details.completed when not (transactions is :empty) otherwise null
	}) when not (checkingAccInfo is :empty),
	
	(savings:
		using (
			transactions = ((flowVars.transactions filter ($.account_id == savingsAccInfo[0].id)) orderBy $.details.completed)[-1..0]
		){
		accountId           : savingsAccInfo[0].id,
		amount              : savingsAccInfo[0].balance.amount,
		currency            : savingsAccInfo[0].balance.currency,
		lastTransactionDate : transactions[0].details.completed when not (transactions is :empty) otherwise null
	}) when not (savingsAccInfo is :empty)
}]]></dw:set-payload>
        </dw:transform-message>
    </sub-flow>
    <sub-flow name="getRegisteredBanksAccountsInfo">
        <set-variable variableName="bankId" value="#[payload]" doc:name="Set bankId variable"/>
        <dw:transform-message doc:name="Load bank info">
            <dw:set-variable variableName="bankVar"><![CDATA[%dw 1.0
%output application/java
---
read(p('registered.banks'), "application/json")[flowVars.bankId]]]></dw:set-variable>
        </dw:transform-message>
        <objectstore:contains config-ref="UserToken__Configuration" key="#[flowVars.user.sub + '_' + flowVars.bankId]" doc:name="Check if user is registered with bank"/>
        <choice doc:name="Contains token for bank?">
            <when expression="payload == true">
                <logger message="Getting accounts from bank '#[flowVars.bankId]'" level="INFO" doc:name="Log process"/>
                <objectstore:retrieve config-ref="UserToken__Configuration" key="#[flowVars.user.sub + '_' + flowVars.bankId]" targetProperty="tokenVar" doc:name="Get tokenVar"/>
                <enricher source="#[dw('payload')]" target="#[flowVars.info]" doc:name="var info">
                    <http:request config-ref="HTTP_Bank_AISP_Request_Configuration" path="/info" method="GET" doc:name="Get accounts info">
                        <http:request-builder>
                            <http:header headerName="Authorization" value="Bearer #[flowVars.tokenVar.token]"/>

                        </http:request-builder>
                    </http:request>
                </enricher>
                <enricher source="#[dw('payload')]" target="#[flowVars.balance]" doc:name="var balance">
                    <http:request config-ref="HTTP_Bank_AISP_Request_Configuration" path="/balance" method="GET" doc:name="Get accounts balance">
                        <http:request-builder>
                            <http:header headerName="Authorization" value="Bearer #[flowVars.tokenVar.token]"/>

                        </http:request-builder>
                    </http:request>
                </enricher>
                <enricher source="#[dw('payload')]" target="#[flowVars.transactions]" doc:name="var transactions">
                    <http:request config-ref="HTTP_Bank_AISP_Request_Configuration" path="/transactions" method="GET" doc:name="Get accounts transactions">
                        <http:request-builder>
                            <http:header headerName="Authorization" value="Bearer #[flowVars.tokenVar.token]"/>

                        </http:request-builder>
                    </http:request>
                </enricher>
                <dw:transform-message doc:name="Build account Info">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
using (
	checkingAccInfo = flowVars.info filter ($.type == "checking"),
	savingsAccInfo = flowVars.info filter ($.type == "savings")
){
	bankName: flowVars.bankVar.name,
	bankId: flowVars.bankId,
	
	
	(checking: 
		using (
			id = checkingAccInfo[0].id,
			balance = flowVars.balance filter ($.account_id == checkingAccInfo[0].id),
			transactions = ((flowVars.transactions filter ($.account_id == checkingAccInfo[0].id)) orderBy $.completed)[-1..0]
		){
		accountId           : id,
		amount              : balance[0].balance,
		currency            : balance[0].currency,
		lastTransactionDate : transactions[0].completed when not (transactions is :empty) otherwise null
	}) when (not (checkingAccInfo is :empty )) and (flowVars.tokenVar.scope contains 'checking'),
	
	
	(savings:
		using (
			id = savingsAccInfo[0].id,
			balance = flowVars.balance filter ($.account_id == savingsAccInfo[0].id),
			transactions = ((flowVars.transactions filter ($.account_id == savingsAccInfo[0].id)) orderBy $.completed)[-1..0]
		){
		accountId           : id,
		amount              : balance[0].balance,
		currency            : balance[0].currency,
		lastTransactionDate : transactions[0].completed when not (transactions is :empty) otherwise null
	}) when (not (savingsAccInfo is :empty)) and (flowVars.tokenVar.scope contains 'savings')
	

}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <logger message="Bank '#[flowVars.bankId]' not linked with user" level="INFO" doc:name="Log not linked"/>
                <set-payload value="#[null]" doc:name="Set response"/>
            </otherwise>
        </choice>
    </sub-flow>
</mule>
